{"version":3,"sources":["reducers/actions.ts","reducers/index.ts","utils/check-grid/index.ts","utils/copy-grid/index.ts","utils/compare-arrays/index.ts","utils/create-full-grid/index.ts","utils/fill-grid/index.ts","utils/get-random-index/index.ts","utils/identify-square/index.ts","utils/is-in/row/index.ts","utils/is-in/col/index.ts","utils/is-in/square/index.ts","utils/remove-numbers/index.ts","utils/shuffle/index.ts","utils/solve-grid/index.ts","reducers/reducer.ts","components/grid/block/styles/index.ts","components/grid/block/index.tsx","components/grid/styles/index.ts","components/grid/index.tsx","components/new-button/index.tsx","components/numbers/button/index.tsx","components/numbers/styles/index.ts","components/numbers/index.tsx","components/styles/button/index.ts","components/styles/card/index.ts","components/styles/content/index.ts","components/styles/title/index.ts","core/configure-store/index.ts","core/service-worker/index.ts","styles/global.ts","index.tsx","styles/theme.ts","global/index.ts","reducers/types.ts"],"names":["createGrid","type","types","selectBlock","coords","fillBlock","value","reducer","checkGrid","grid","i","j","copyGrid","gridCopy","r","c","compareArrays","array1","array2","Array","isArray","length","len","createFullGrid","fillGrid","numbers","row","col","Math","floor","shuffle","isInRow","isInCol","square","identifySquare","isInSquare","getRandomIndex","random","identifyWorkingSquare","x","push","includes","removeNumbers","attempts","backup","global","counter","solveGrid","array","initialState","state","action","solvedGrid","challengeGrid","workingGrid","selectedBlock","alert","hasWon","Container","styled","div","active","theme","puzzle","css","colors","blue","white","black","transition","lightBlue","Block","colIndex","rowIndex","useSelector","isActive","isPuzzle","dispatch","useDispatch","data-cy","onClick","Row","Grid","selectedValue","create","useCallback","fill","n","useMousetrap","useEffect","React","useState","showConfetti","setShowConfetti","setTimeout","Children","toArray","map","_","NewButton","createNewGame","window","confirm","Button","NumberButton","Numbers","key","button","Card","Content","Title","h1","persistConfig","storage","persistedReducer","persistReducer","configureStore","store","createStore","devToolsEnhancer","persistor","persistStore","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","createGlobalStyle","background","ReactDOM","render","loading","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","CREATE_GRID","FILL_BLOCK","SELECT_BLOCK"],"mappings":"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","file":"static/js/main.cf08844a.chunk.js","sourcesContent":["import { Action, AnyAction } from 'redux';\r\n\r\nimport { BLOCK_COORDS, NUMBERS } from 'typings';\r\n\r\nimport * as types from './types';\r\n\r\nexport const createGrid = (): Action => ({\r\n    type: types.CREATE_GRID\r\n});\r\n\r\nexport const selectBlock = (coords: BLOCK_COORDS): AnyAction => ({\r\n    type: types.SELECT_BLOCK, \r\n    coords\r\n});\r\n\r\nexport const fillBlock = (value: NUMBERS, coords: BLOCK_COORDS): AnyAction => ({\r\n    type: types.FILL_BLOCK,\r\n    coords,\r\n    value\r\n});","import reducer from './reducer';\r\n\r\nexport * from './actions';\r\nexport * from './interfaces';\r\n\r\nexport type IReducer = ReturnType<typeof reducer>\r\nexport default reducer;","import { GRID } from 'typings';\r\n\r\n/**\r\n * function to check if grid is full\r\n * \r\n * @param grid 9x9 Soduku Grid\r\n */\r\nfunction checkGrid(grid: GRID): boolean {\r\n    for (let i = 0; i < 9; i++) {\r\n        for (let j = 0; j < 9; j++) {\r\n            if (grid[i][j] === 0) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport default checkGrid;","import { GRID, INDEX } from 'typings';\r\n\r\nfunction copyGrid(grid: GRID): GRID {\r\n    const gridCopy: GRID = [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    ]\r\n\r\n    for (let r: INDEX = 0; r < 9; r++) {\r\n        for (let c: INDEX = 0; c < 9; c++) {\r\n            gridCopy[r][c] = grid[r][c];\r\n        }\r\n    }\r\n\r\n    return gridCopy;\r\n}\r\n\r\nexport default copyGrid;","/**\r\n * compares two arrays of any dimensions\r\n * returns true if they are equal arrays\r\n * otherwise returns false\r\n * \r\n * @param array1 \r\n * @param array2 \r\n */\r\nfunction compareArrays(array1: any[], array2: any[]): boolean {\r\n    if (!Array.isArray(array1) && !Array.isArray(array2)) {\r\n        return array1 === array2;\r\n    }\r\n\r\n    if (array1.length !== array2.length) return false;\r\n\r\n    for (let i = 0, len = array1.length; i < len; i++) {\r\n        if (!compareArrays(array1[i], array2[i])) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport default compareArrays;","import { GRID } from 'typings';\r\nimport { fillGrid } from 'utils';\r\n\r\n/**\r\n * function used to create a full valid soduku grid\r\n */\r\nfunction createFullGrid(): GRID {\r\n    const grid: GRID = [\r\n        [0, 4, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [7, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 2, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 1],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 3, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 9, 0]\r\n    ];\r\n\r\n    fillGrid(grid);\r\n    return grid;\r\n}\r\n\r\nexport default createFullGrid;","import { GRID, NUMBERS } from 'typings';\r\nimport { \r\n  checkGrid,\r\n  identifySquare, \r\n  isInCol, \r\n  isInRow, \r\n  isInSquare, \r\n  shuffle \r\n} from 'utils';\r\n\r\n\r\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n/**\r\n * A backgracking / recursive function to check all possible\r\n * combinations of numbers until a solution is found\r\n *\r\n * @param grid 9x9 Soduku grid\r\n */\r\nfunction fillGrid(grid: GRID) {\r\n  let row = 0;\r\n  let col = 0;\r\n\r\n  for (let i = 0; i < 81; i++) {\r\n    row = Math.floor(i / 9);\r\n    col = i % 9;\r\n\r\n    if (grid[row][col] === 0) {\r\n      shuffle(numbers);\r\n\r\n      for (let value of numbers) {\r\n          if (!isInRow({ grid, row, value })) {\r\n            if (!isInCol({ grid, col, value })) {\r\n                const square = identifySquare({ grid, row, col })\r\n                if (!isInSquare({ square, value })) {\r\n                  grid[row][col] = value;\r\n                  // check grid if it is full; if yes, stop and return\r\n                  if (checkGrid(grid)) return true\r\n                  // otherwise we run fillGrid(grid)\r\n                  else if (fillGrid(grid)) return true\r\n                }               \r\n            }\r\n          }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  grid[row][col] = 0;\r\n}\r\n\r\nexport default fillGrid;\r\n","/**\r\n * Random Sodoku Grid Index in 0-8 Range\r\n */\r\nfunction getRandomIndex() {\r\n    return Math.floor(Math.random() * Math.floor(9));\r\n}\r\n\r\nexport default getRandomIndex;","import { GRID, SQUARE } from 'typings';\r\n\r\ninterface IInput {\r\n    grid: GRID,\r\n    row: number,\r\n    col: number\r\n}\r\n\r\n/**\r\n * function that identifies and returns the current square of a given \r\n * soduku grid index\r\n * \r\n * @param input Object with 9x9 Soduku Grid, row index, and column index \r\n */\r\nfunction identifyWorkingSquare({ grid, row, col }: IInput): SQUARE {\r\n    const square = [];\r\n\r\n    if (row < 3) {\r\n        if (col < 3) {\r\n            for (let x = 0; x < 3; x++) {\r\n                square.push([grid[x][0], grid[x][1], grid[x][2]])\r\n            }\r\n        } \r\n\r\n        else if (col < 6) {\r\n            for (let x = 0; x < 3; x++) {\r\n                square.push([grid[x][3], grid[x][4], grid[x][5]])\r\n            }\r\n        }\r\n\r\n        else {\r\n            for (let x = 0; x < 3; x++) {\r\n                square.push([grid[x][6], grid[x][7], grid[x][8]])\r\n            }\r\n        }\r\n    }\r\n\r\n    else if (row < 6) {\r\n        if (col < 3) {\r\n            for (let x = 3; x < 6; x++) {\r\n                square.push([grid[x][0], grid[x][1], grid[x][2]])\r\n            }\r\n        } \r\n\r\n        else if (col < 6) {\r\n            for (let x = 3; x < 6; x++) {\r\n                square.push([grid[x][3], grid[x][4], grid[x][5]])\r\n            }\r\n        }\r\n\r\n        else {\r\n            for (let x = 3; x < 6; x++) {\r\n                square.push([grid[x][6], grid[x][7], grid[x][8]])\r\n            }\r\n        }\r\n    }\r\n\r\n    else {\r\n        if (col < 3) {\r\n            for (let x = 6; x < 9; x++) {\r\n                square.push([grid[x][0], grid[x][1], grid[x][2]])\r\n            }\r\n        } \r\n\r\n        else if (col < 6) {\r\n            for (let x = 6; x < 9; x++) {\r\n                square.push([grid[x][3], grid[x][4], grid[x][5]])\r\n            }\r\n        }\r\n\r\n        else {\r\n            for (let x = 6; x < 9; x++) {\r\n                square.push([grid[x][6], grid[x][7], grid[x][8]])\r\n            }\r\n        }\r\n    }\r\n\r\n    return square as SQUARE;\r\n}\r\n\r\nexport default identifyWorkingSquare;","import { GRID, NUMBERS } from 'typings';\r\n\r\ninterface IInput {\r\n    grid: GRID\r\n    row: number\r\n    value: NUMBERS\r\n}\r\n\r\n/**\r\n * function that returns True if value is cannot be entered into an input square\r\n * because it already exists in that squares row\r\n * \r\n * @param input Object with 9x9 Soduku Grid, row index, desired input value\r\n */\r\nfunction isInRow({ grid, row, value}: IInput): boolean {\r\n    return grid[row].includes(value);\r\n}\r\n\r\nexport default isInRow;","import { GRID, NUMBERS } from 'typings';\r\n\r\ninterface IInput {\r\n    grid: GRID\r\n    col: number\r\n    value: NUMBERS\r\n}\r\n\r\n/**\r\n * function that returns True if value is cannot be entered into an input square\r\n * because it already exists in that squares column\r\n * \r\n * @param input Object with 9x9 Soduku Grid, column index, desired input value\r\n */\r\nfunction isInCol({ grid, col, value}: IInput): boolean {\r\n    \r\n    for (let i = 0; i < 9; i++) {\r\n        if (value === grid[i][col]) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport default isInCol;","import { NUMBERS, SQUARE } from 'typings';\r\n\r\ninterface IInput {\r\n    square: SQUARE\r\n    value: NUMBERS\r\n}\r\n\r\n/**\r\n * function that returns true if value is already in desired square\r\n * \r\n * @param input Object 3x3 Square\r\n */\r\nfunction isInSquare({ square, value }: IInput): boolean {\r\n    return [...square[0], ...square[1], ...square[2]].includes(value)\r\n};\r\n\r\nexport default isInSquare;","import global from 'global';\r\nimport { GRID } from 'typings';\r\nimport { copyGrid, getRandomIndex, solveGrid } from 'utils';\r\n\r\n\r\n/**\r\n * Removes numbers from a full grid to create a Soduku Puzzle\r\n * \r\n * @param grid 9x9 Full Soduku Grid\r\n * @param attempts number of attempts to solve (higher means more difficult) - default 5\r\n */\r\nfunction removeNumbers(grid: GRID, attempts = 5): GRID {\r\n\r\n    while (attempts > 0) {\r\n        // select a random row\r\n        let row = getRandomIndex();\r\n        let col = getRandomIndex();\r\n\r\n        while (grid[row][col] === 0) {\r\n            row = getRandomIndex();\r\n            col = getRandomIndex();\r\n        }\r\n\r\n        const backup = grid[row][col];\r\n        grid[row][col] = 0;\r\n\r\n    \r\n        const gridCopy = copyGrid(grid);\r\n        global.counter = 0; \r\n\r\n        // attempt to solve the grid\r\n        solveGrid(gridCopy);\r\n\r\n        if (global.counter !== 1) {\r\n            grid[row][col] = backup;\r\n            attempts--;\r\n        }\r\n        \r\n    }\r\n    return grid;\r\n}\r\n\r\nexport default removeNumbers;","/**\r\n * Array shuffling uysing Fisher-Yates Shuffle Algo\r\n * @param array \r\n */\r\nfunction shuffle(array: any[]) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i+1));\r\n        ;[array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n}\r\n\r\nexport default shuffle;","import global from 'global';\r\nimport { GRID, NUMBERS } from 'typings';\r\nimport { checkGrid, identifySquare, isInCol, isInRow, isInSquare } from 'utils';\r\n\r\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n/**\r\n * recursive function to check all possible combinations of numbers\r\n * until a solution is found\r\n * \r\n * @param grid 9x9 Soduku Grid\r\n */\r\nfunction solveGrid(grid: GRID) {\r\n    let row = 0;\r\n    let col = 0;\r\n\r\n    for (let i = 0; i < 81; i++) {\r\n        row = Math.floor(i / 9);\r\n        col = i % 9;\r\n\r\n        if (grid[row][col] === 0) {\r\n            for (let value of numbers) {\r\n                if (!isInRow({grid, row, value})) {\r\n                    if (!isInCol({grid, col, value})) {\r\n                        const square = identifySquare({grid, row, col});\r\n                        if (!isInSquare({ square, value })) {\r\n                            grid[row][col] = value;\r\n                            if (checkGrid(grid)) {\r\n                                global.counter++;\r\n                                break;\r\n                            } else if (solveGrid(grid)) return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        } \r\n    }\r\n    \r\n    grid[row][col] = 0;\r\n}\r\n\r\nexport default solveGrid;","import { AnyAction } from 'redux';\r\nimport { GRID } from 'typings'\r\n\r\nimport global from 'global';\r\n\r\nimport { createFullGrid, copyGrid, removeNumbers, compareArrays } from 'utils';\r\n\r\nimport { IReducer } from './interfaces';\r\nimport * as types from './types';\r\n\r\nconst initialState: IReducer = {}\r\n\r\nfunction reducer(state = initialState, action: AnyAction): IReducer {\r\n\r\n    switch(action.type) {\r\n\r\n        case types.CREATE_GRID: {\r\n\r\n            const solvedGrid = createFullGrid();\r\n            const gridCopy = copyGrid(solvedGrid);\r\n            const challengeGrid = removeNumbers(gridCopy, 8);\r\n\r\n            const workingGrid = copyGrid(challengeGrid);\r\n\r\n            return {\r\n                ...state,\r\n                challengeGrid,\r\n                solvedGrid,\r\n                workingGrid\r\n            }\r\n        }\r\n\r\n        case types.SELECT_BLOCK: \r\n            return {\r\n                ...state,\r\n                selectedBlock: action.coords\r\n            }\r\n\r\n        case types.FILL_BLOCK: {\r\n\r\n            if (state.workingGrid && state.solvedGrid) {\r\n                if (state.solvedGrid[action.coords[0]][action.coords[1]] !== action.value) {\r\n                    alert(\"Incorrect Options!\");\r\n                    return state;\r\n                } \r\n\r\n                state.workingGrid[action.coords[0]][action.coords[1]] = action.value;\r\n                if (compareArrays(state.workingGrid, state.solvedGrid)) {\r\n                    global.hasWon = true;\r\n                }\r\n                \r\n                return { ...state, workingGrid: [...state.workingGrid] as GRID}\r\n            }\r\n\r\n            return state; \r\n        }\r\n            \r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import styled, { css } from 'styled-components';\r\n\r\ninterface IProps {\r\n    active?: boolean\r\n    puzzle?: boolean\r\n}\r\n\r\nexport const Container = styled.div<IProps>`\r\n    ${({ active, theme, puzzle }) => css `\r\n        align-items: center;\r\n        background-color: ${active ? theme.colors.blue :theme.colors.white};\r\n        border: solid 1px ${theme.colors.black};\r\n        cursor: pointer;\r\n        display: flex;\r\n        flex-grow: 1;\r\n        flex-shrink: 0;\r\n        flex-basis: 0;\r\n        font-size: 20px;\r\n        font-weight: ${puzzle ? 'bold' : 'normal'};\r\n        height: auto;\r\n        justify-content: center;\r\n        transition: ${theme.transition};\r\n        user-select: none;\r\n\r\n        &:before {\r\n            padding-top: 100%;\r\n            content: '';\r\n            float: left;\r\n        }\r\n\r\n        &:hover {\r\n            background-color: ${theme.colors.lightBlue};\r\n        }\r\n    `}\r\n`","import React, { FC } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Dispatch, AnyAction } from 'redux'\r\n\r\nimport { IReducer, selectBlock } from 'reducers';\r\nimport { N, INDEX } from 'typings';\r\n\r\nimport { Container } from './styles';\r\n\r\ninterface IProps {\r\n    colIndex: INDEX\r\n    rowIndex: INDEX\r\n}\r\n\r\ninterface IState {\r\n    isActive: boolean\r\n    value: N\r\n    isPuzzle: boolean\r\n}\r\n\r\nconst Block: FC<IProps> = ({ colIndex, rowIndex }) => {\r\n\r\n    const state = useSelector<IReducer, IState>(({ workingGrid, selectedBlock, challengeGrid }) => ({ \r\n        isActive: selectedBlock ? selectedBlock[0] === rowIndex && selectedBlock[1] === colIndex : false,\r\n        isPuzzle: challengeGrid && challengeGrid[rowIndex][colIndex] !== 0 ? true : false,\r\n        value: workingGrid ? workingGrid[rowIndex][colIndex]  : 0 \r\n    }));\r\n\r\n    const dispatch = useDispatch<Dispatch<AnyAction>>();\r\n\r\n    function handleClick() {\r\n        if (!state.isActive) dispatch(selectBlock([rowIndex, colIndex]))\r\n    }\r\n\r\n    return (\r\n        <Container active={state.isActive} data-cy={`block-${rowIndex}-${colIndex}`} onClick={handleClick} puzzle={state.isPuzzle}>\r\n            {state.value === 0 ? '' : state.value}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Block;","import styled, { css } from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 10px 0;\r\n`\r\n\r\nexport const Row = styled.div`\r\n    ${({ theme }) => css `\r\n        display: flex;\r\n        flex-flow: row;\r\n\r\n        &:nth-child(1) {\r\n            div {\r\n                border-top: solid 4px ${theme.colors.black};\r\n            }\r\n        }\r\n\r\n        &:nth-child(3), \r\n        &:nth-child(6) {\r\n            div {\r\n                border-bottom: solid 4px ${theme.colors.black};\r\n            }\r\n        }\r\n\r\n        &:nth-child(9) {\r\n            div {\r\n                border-bottom: solid 3px ${theme.colors.black};\r\n            }\r\n        }\r\n\r\n        div {\r\n            &:nth-child(1) {\r\n                border-left: solid 4px ${theme.colors.black};\r\n            }\r\n\r\n            &:nth-child(3), \r\n            &:nth-child(6),\r\n            &:nth-child(9) {\r\n                border-right: solid 4px ${theme.colors.black};\r\n            }\r\n\r\n            &:nth-child(4)\r\n            &:nth-child(7) {\r\n                border-left: none;\r\n            }\r\n        }\r\n    `}\r\n`","import React, { Children, FC, useCallback, useEffect } from 'react';\r\nimport useMousetrap from 'react-hook-mousetrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AnyAction, Dispatch } from 'redux';\r\n\r\nimport global from 'global';\r\n\r\nimport { createGrid, IReducer, fillBlock, selectBlock } from 'reducers';\r\n\r\nimport Block from './block';\r\nimport { Container, Row } from './styles';\r\nimport { GRID, INDEX, BLOCK_COORDS, NUMBERS, N } from 'typings';\r\n\r\nimport Confetti from 'react-confetti'\r\n\r\ninterface IState {\r\n  selectedBlock?: BLOCK_COORDS\r\n  selectedValue: N\r\n  solvedGrid?: GRID\r\n}\r\n\r\nconst Grid: FC = () => {\r\n  const state = useSelector<IReducer, IState>(({ selectedBlock, solvedGrid, workingGrid }) => ({\r\n    selectedBlock,\r\n    selectedValue: workingGrid && selectedBlock ? \r\n      workingGrid[selectedBlock[0]][selectedBlock[1]]\r\n    : 0,\r\n    solvedGrid\r\n  }));\r\n  const dispatch = useDispatch<Dispatch<AnyAction>>();\r\n\r\n  const create = useCallback(() => dispatch(createGrid()), [dispatch]);\r\n\r\n  const fill = useCallback((n : NUMBERS) => {\r\n\r\n    if (state.selectedBlock && state.selectedValue === 0) {\r\n      dispatch(fillBlock(n, state.selectedBlock))\r\n    }\r\n\r\n  }, [dispatch, state.selectedBlock, state.selectedValue])\r\n\r\n  function moveDown() {\r\n    if (state.selectedBlock && state.selectedBlock[0] < 8) {\r\n      dispatch(\r\n        selectBlock([\r\n          (state.selectedBlock[0] + 1) as INDEX,\r\n          state.selectedBlock[1],\r\n        ])\r\n      );\r\n    }\r\n  }\r\n\r\n  function moveLeft() {\r\n    if (state.selectedBlock && state.selectedBlock[1] > 0) {\r\n      dispatch(\r\n        selectBlock([\r\n          state.selectedBlock[0],\r\n          (state.selectedBlock[1] - 1) as INDEX,\r\n        ])\r\n      );\r\n    }\r\n  }\r\n\r\n  function moveRight() {\r\n    if (state.selectedBlock && state.selectedBlock[1] < 8) {\r\n      dispatch(\r\n        selectBlock([\r\n          state.selectedBlock[0],\r\n          (state.selectedBlock[1] + 1) as INDEX,\r\n        ])\r\n      );\r\n    }\r\n  }\r\n\r\n  function moveUp() {\r\n    if (state.selectedBlock && state.selectedBlock[0] > 0) {\r\n      dispatch(\r\n        selectBlock([\r\n          (state.selectedBlock[0] - 1) as INDEX,\r\n          state.selectedBlock[1],\r\n        ])\r\n      );\r\n    }\r\n  }\r\n\r\n  useMousetrap('1', () => fill(1));\r\n  useMousetrap('2', () => fill(2));\r\n  useMousetrap('3', () => fill(3));\r\n  useMousetrap('4', () => fill(4));\r\n  useMousetrap('5', () => fill(5));\r\n  useMousetrap('6', () => fill(6));\r\n  useMousetrap('7', () => fill(7));\r\n  useMousetrap('8', () => fill(8));\r\n  useMousetrap('9', () => fill(9));\r\n\r\n  useMousetrap('down', moveDown);\r\n  useMousetrap('up', moveUp);\r\n  useMousetrap('left', moveLeft);\r\n  useMousetrap('right', moveRight);\r\n\r\n  useEffect(() => {\r\n    if (!state.solvedGrid) create();\r\n  }, [create, state.solvedGrid]);\r\n\r\n  const [showConfetti, setShowConfetti] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    if (global.hasWon) {\r\n      setShowConfetti(true);\r\n    }\r\n    \r\n    setTimeout(() => {\r\n      setShowConfetti(false);\r\n      global.hasWon = false;\r\n    }, 6000);\r\n  }, [global.hasWon])\r\n\r\n\r\n  return (\r\n    <>\r\n    { showConfetti && <Confetti />}\r\n\r\n    <Container data-cy=\"grid-container\">\r\n      {Children.toArray(\r\n        [...Array(9)].map((_, rowIndex) => (\r\n          <Row data-cy=\"grid-row-container\">\r\n            {Children.toArray(\r\n              [...Array(9)].map((_, colIndex) => (\r\n                <Block\r\n                  colIndex={colIndex as INDEX}\r\n                  rowIndex={rowIndex as INDEX}\r\n                />\r\n              ))\r\n            )}\r\n          </Row>\r\n        ))\r\n      )}\r\n    </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React, { FC, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Action, Dispatch } from 'redux';\r\n\r\nimport { createGrid } from 'reducers';\r\n\r\nimport global from 'global';\r\n\r\nimport { Button } from 'components';\r\n\r\nconst NewButton: FC = () => {\r\n\r\n    const dispatch = useDispatch<Dispatch<Action>>();\r\n\r\n    const createNewGame = useCallback(() => {\r\n        if (window.confirm(\"Are you sure?\")) {\r\n            dispatch(createGrid())\r\n            global.hasWon = true\r\n        }\r\n    }, [dispatch])\r\n\r\n    return <Button onClick={createNewGame}>New Game</Button>\r\n}\r\n\r\nexport default NewButton;","import React, { FC, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AnyAction, Dispatch } from 'redux';\r\n\r\nimport { Button } from 'components';\r\nimport { fillBlock, IReducer } from 'reducers';\r\nimport { NUMBERS, BLOCK_COORDS, N } from 'typings';\r\n\r\ninterface IProps {\r\n  value: NUMBERS;\r\n}\r\n\r\ninterface IState {\r\n  selectedBlock?: BLOCK_COORDS;\r\n  selectedValue: N;\r\n}\r\n\r\nconst NumberButton: FC<IProps> = ({ value }) => {\r\n  const state = useSelector<IReducer, IState>(({ selectedBlock, workingGrid }) => ({\r\n      selectedBlock,\r\n      selectedValue:\r\n        workingGrid && selectedBlock ? \r\n            workingGrid[selectedBlock[0]][selectedBlock[1]]\r\n        : 0\r\n  }));\r\n\r\n  const dispatch = useDispatch<Dispatch<AnyAction>>();\r\n\r\n  const fill = useCallback(() => {\r\n      if (state.selectedBlock && state.selectedValue === 0) {\r\n          dispatch(fillBlock(value, state.selectedBlock));\r\n      }\r\n  }, [dispatch, state.selectedBlock, state.selectedValue, value])\r\n\r\n  return <Button onClick={fill}>{value}</Button>;\r\n};\r\n\r\nexport default NumberButton;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-flow: row;\r\n`","import React, { FC } from 'react';\r\n\r\nimport { NUMBERS } from 'typings';\r\n\r\nimport Button from './button';\r\nimport { Container } from './styles';\r\n\r\nconst Numbers: FC = () => (\r\n    <Container>\r\n        {([1, 2, 3, 4, 5, 6, 7, 8, 9] as NUMBERS[]).map(value => (\r\n            <Button key={value} value={value} />\r\n        )) }\r\n    </Container>\r\n)\r\n\r\nexport default Numbers;","import styled, { css } from 'styled-components';\r\n\r\nexport const Button = styled.button`\r\n    ${({ theme }) => css `\r\n        align-items: center;\r\n        background-color: ${theme.colors.black};\r\n        border: 2px solid ${theme.colors.black};\r\n        border-radius: 4px;\r\n        color: ${theme.colors.white};\r\n        cursor: pointer;\r\n        display: flex;\r\n        flex: 1;\r\n        font-size: 16px;\r\n        font-weight: bold;\r\n        height: 40px;\r\n        justify-content: center;\r\n        margin: 4px 2px;\r\n        min-height: 40px;\r\n        opacity: 0.9;\r\n        padding: 0;\r\n        transition: ${theme.transition};\r\n\r\n        &:focus {\r\n            border-color: ${theme.colors.blue};\r\n            outline: none;\r\n        }\r\n\r\n        &:hover {\r\n            opacity: 0.6;\r\n        }\r\n    `}\r\n`","import styled, { css } from 'styled-components';\r\n\r\nexport const Card = styled.div`\r\n    ${({ theme }) => css `\r\n        background-color: ${theme.colors.white};\r\n        border-radius: 15px;\r\n        display: flex;\r\n        flex: 1;\r\n        flex-direction: column;\r\n        max-height: fit-content;\r\n        padding: 15px;\r\n    `}\r\n`","import styled from 'styled-components';\r\n\r\nexport const Content = styled.div`\r\n    max-width: 500px;\r\n    display: flex;\r\n    flex: 1;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n`","import styled, { css } from 'styled-components';\r\n\r\nexport const Title = styled.h1`\r\n    ${({ theme }) => css`\r\n        color: ${theme.colors.white};\r\n        margin-top: 0;\r\n        text-align: center;S\r\n    `}\r\n`","import { createStore } from 'redux';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension';\r\n\r\nimport reducer from 'reducers';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducer);\r\n\r\nfunction configureStore() {\r\n    const store = createStore(\r\n        persistedReducer, \r\n        devToolsEnhancer({})\r\n    );\r\n\r\n    const persistor = persistStore(store);\r\n\r\n    return {store, persistor};\r\n}\r\n\r\nexport default configureStore;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  type Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n  };\r\n  \r\n  export function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(\r\n        process.env.PUBLIC_URL,\r\n        window.location.href\r\n      );\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import { createGlobalStyle, css } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n${({ theme }) => css`\r\n    html {\r\n        height: 100%;\r\n\r\n        body {\r\n            display: flex;\r\n            flex-direction: column;\r\n            height: 100%;\r\n            margin: 0;\r\n\r\n            #root {\r\n                background: ${theme.colors.background};\r\n                color: ${theme.colors.black};\r\n                display: flex;\r\n                font-family: sans-serif;\r\n                height: 100%;\r\n                justify-content: center;\r\n                padding: 15px;\r\n            }\r\n        }\r\n    }\r\n`}\r\n`","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nimport { Card, Content, Grid, NewButton, Numbers, Title } from 'components';\r\nimport { configureStore, register } from 'core';\r\nimport { GlobalStyles, theme } from 'styles';\r\n\r\nconst { persistor, store } = configureStore();\r\n\r\nReactDOM.render(\r\n  <ThemeProvider theme={theme}>\r\n    <GlobalStyles />\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <Content data-cy=\"content\">\r\n          <Title data-cy=\"title\">Soduku</Title>\r\n          <Card data-cy=\"card\">\r\n            <NewButton />\r\n            <Grid />\r\n            <Numbers />\r\n          </Card>\r\n        </Content>\r\n      </PersistGate>\r\n    </Provider>\r\n  </ThemeProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nregister();\r\n","export default {\r\n    colors: {\r\n        background: 'radial-gradient(#282c34cc, #282c34)',\r\n        black: '#282c34',\r\n        blue: '#a0e9fd',\r\n        lightBlue: '#caf3fe',\r\n        white: 'white',\r\n    },\r\n    transition: '0.3s',\r\n}","export default {\r\n    counter: 0,\r\n    hasWon: false\r\n}","export const CREATE_GRID = 'CREATE_GRID';\r\nexport const FILL_BLOCK = 'FILL_BLOCK';\r\nexport const SELECT_BLOCK = 'SELECT_BLOCK';"],"sourceRoot":""}